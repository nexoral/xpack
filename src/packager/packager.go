package packager

import (
	"archive/tar"
	"compress/gzip"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
)

// BuildAll creates a .deb (if dpkg-deb exists) and a tar.gz package for the given binary
func BuildAll(binaryPath, appName, version, arch, outDir string) error {
	// ensure binary exists
	if _, err := os.Stat(binaryPath); err != nil {
		return fmt.Errorf("binary not found: %w", err)
	}

	// create outDir
	if err := os.MkdirAll(outDir, 0o755); err != nil {
		return err
	}

	// tar.gz
	if err := buildTarGz(binaryPath, appName, version, arch, outDir); err != nil {
		return err
	}

	// .deb (if dpkg-deb is available)
	if _, err := exec.LookPath("dpkg-deb"); err == nil {
		if err := buildDeb(binaryPath, appName, version, arch, outDir); err != nil {
			return err
		}
	}

	return nil
}

func buildTarGz(binaryPath, appName, version, arch, outDir string) error {
	name := fmt.Sprintf("%s_%s_%s.tar.gz", appName, version, arch)
	outPath := filepath.Join(outDir, name)
	f, err := os.Create(outPath)
	if err != nil {
		return err
	}
	defer f.Close()
	gw := gzip.NewWriter(f)
	defer gw.Close()
	tw := tar.NewWriter(gw)
	defer tw.Close()

	// place binary at usr/local/bin/<appName>
	target := filepath.Join("usr", "local", "bin", appName)
	if err := addFileToTar(tw, binaryPath, target); err != nil {
		return err
	}
	return nil
}

func addFileToTar(tw *tar.Writer, srcPath, destPath string) error {
	info, err := os.Stat(srcPath)
	if err != nil {
		return err
	}
	hdr, err := tar.FileInfoHeader(info, "")
	if err != nil {
		return err
	}
	hdr.Name = destPath
	// ensure executable permissions
	hdr.Mode = int64(0o755)
	if err := tw.WriteHeader(hdr); err != nil {
		return err
	}
	f, err := os.Open(srcPath)
	if err != nil {
		return err
	}
	defer f.Close()
	_, err = io.Copy(tw, f)
	return err
}

func buildDeb(binaryPath, appName, version, arch, outDir string) error {
	pkgDir := fmt.Sprintf("%s_%s_%s", appName, version, arch)
	// create folder structure
	if err := os.RemoveAll(pkgDir); err != nil {
		return err
	}
	if err := os.MkdirAll(filepath.Join(pkgDir, "DEBIAN"), 0o755); err != nil {
		return err
	}
	if err := os.MkdirAll(filepath.Join(pkgDir, "usr", "local", "bin"), 0o755); err != nil {
		return err
	}

	// control file
	control := fmt.Sprintf("Package: %s\nVersion: %s\nSection: utils\nPriority: optional\nArchitecture: %s\nMaintainer: xpack\nDescription: Generated by xpack\n", appName, version, arch)
	if err := os.WriteFile(filepath.Join(pkgDir, "DEBIAN", "control"), []byte(control), 0o644); err != nil {
		return err
	}

	// copy binary
	dest := filepath.Join(pkgDir, "usr", "local", "bin", appName)
	if err := copyFile(binaryPath, dest); err != nil {
		return err
	}
	if err := os.Chmod(dest, 0o755); err != nil {
		return err
	}

	// build .deb
	outDeb := fmt.Sprintf("%s_%s_%s.deb", appName, version, arch)
	cmd := exec.Command("dpkg-deb", "--build", pkgDir, outDeb)
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	if err := cmd.Run(); err != nil {
		return err
	}
	// move to outDir
	if err := os.Rename(outDeb, filepath.Join(outDir, outDeb)); err != nil {
		return err
	}

	// cleanup pkgDir
	return os.RemoveAll(pkgDir)
}

func copyFile(src, dst string) error {
	// ensure dst dir exists
	if err := os.MkdirAll(filepath.Dir(dst), 0o755); err != nil {
		return err
	}
	in, err := os.Open(src)
	if err != nil {
		return err
	}
	defer in.Close()
	out, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer out.Close()
	if _, err := io.Copy(out, in); err != nil {
		return err
	}
	return out.Sync()
}
